install.packages("dygraphs")
```{r, echo=FALSE, results='hide'}
shiny::runApp('Dropbox/Nico-Chris2/Live Strategy App')
shiny::runApp('Dropbox/Nico-Chris2/Gerber3')
shiny::runApp('Dropbox/Nico-Chris2/Gerber3')
shiny::runApp('Dropbox/Nico-Chris2/Live Strategy App')
library(curl)
con = gzcon(curl('https://github.com/systematicinvestor/SIT/raw/master/sit.gz','rb'))
source(con)
close(con)
compute.turnover
setwd("~/Dropbox/Live Strategy Presentation/6. New_6040")
load.packages('quantmod')
tickers = spl('SPY')
data2 <- new.env()
getSymbols(tickers, src = 'yahoo', from = "1970-01-01'", env = data2, auto.assign = T)
for(i in ls(data2)) data2[[i]] = adjustOHLC(data2[[i]], use.Adjusted=T)
bt.prep(data2, align='remove.na')
date <- first(index(data2$SPY))
tickers = '
STOCK = SPY + VTSMX + VFINX
BOND = TLT + VUSTX
CASH = SHY + TB3Y
'
load('./data/data.proxy.raw.Rdata')
# Load saved Proxies Raw Data, data.proxy.raw
data <- new.env()
getSymbols.extra(tickers, src = 'yahoo', from = date, env = data,
raw.data = data.proxy.raw, auto.assign = T, set.symbolnames = T)
# Probably started Dec.29, 1989 (last trading day)
for(i in data$symbolnames) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)
bt.prep(data, align='remove.na', dates='::')
# Prepare data
data$universe = data$prices > 0
# Sets to TRUE(or 1) all data prices that make sense
data$universe$CASH = NA
# Set weithing of cash to NA
prices = data$prices * data$universe
n = ncol(prices)
period.ends = endpoints(prices, 'months')
# Set period end to monthly endpoint
period.ends <- period.ends[-1]
period.ends<-period.ends[-1]
}
if(period.ends[1]==1){ # If data started at end of month
period.ends<-period.ends-1
# Signal generated one day before month end
obj = list()
# Create an empty list
commission = list(cps = 0.01, fixed = 10.0, percentage = 0.0)
# Commission
# Traditional, Dollar Weighted 40% Bonds & 60% Stock
target.allocation = NA * prices
target.allocation$STOCK = 60/100
target.allocation$BOND = 40/100
# Set target allocations
obj$weights$dollar.w.60.40 = target.allocation[period.ends, ]
# Risk Weighted 40% Bonds & 60% Stock
ret = diff(log(prices))
hist.vol = bt.apply.matrix(ret, runSD, n = 20)
# risk-parity
weight.risk = 1 / hist.vol
weight.risk = weight.risk / rowSums(weight.risk, na.rm=T)
# Weight based off risk
obj$weights$risk.w.60.40 = weight.risk[period.ends,]
# Cash Filter
# compute 10 month moving average
sma = bt.apply.matrix(prices, SMA, 200)
# go to cash if prices falls below 10 month moving average
go2cash = prices < sma
go2cash = ifna(go2cash, T)[period.ends,]
#Replaces all NAs with T and subsets for period ends
weight = obj$weights$risk.w.60.40
# set same weight
weight[go2cash] = 0
# Sets cash as 0 instead of NA
weight$CASH = 1 - rowSums(weight, na.rm=T)
# cash weight
obj$weights$risk.w.60.40.CASH = weight
weight[] = obj$weights$dollar.w.60.40
weight[go2cash] = 0
weight$CASH = 1 - rowSums(weight, na.rm=T)
obj$weights$dollar.w.60.40.CASH = weight
# Scale Risk Weighted 40% Bonds & 60% Stock strategy to have 6% volatility
models<-list()
models[names(obj$weights)]<-NA
for(i in 1:length(obj$weights)){
data$weight[period.ends+1, ]<-obj$weights[[i]]
models[[i]]<- bt.run.share(data, clean.signal=F,  trade.summary=T, silent=T, commission=commission)
}
# Run strategies
weight = target.vol.strategy(models$risk.w.60.40, ifna(weight.risk,0),
target=6/100, lookback.len=21, max.portfolio.leverage=100/100)
# Set weithing to 6% volatility
# invested not allocated to CASH
weight$CASH = 1 - rowSums(weight)
obj$weights$risk.w.60.40.target6.cash = weight[period.ends,]
data$weight[period.ends+1,]<-obj$weights$risk.w.60.40.target6.cash
models$risk.w.60.40.target6.cash<- bt.run.share(data, clean.signal=F, trade.summary=T, silent=T, commission=commission)
# Run strategy
models$dollar.w.60.40$period.weight<- obj$weights[[1]]
models$risk.w.60.40$period.weight<- obj$weights[[2]]
models$risk.w.60.40.CASH$period.weight<- obj$weights[[3]]
models$dollar.w.60.40.CASH$period.weight<- obj$weights[[4]]
models$risk.w.60.40.target6.cash$period.weight = weight[period.ends,]
# To make the signal report work
models$risk.w.60.40 <- NULL
models$dollar.w.60.40.CASH <-NULL
data2$weight[] = NA
data2$weight$SPY = 1
models$SPY = bt.run.share(data2, clean.signal=T, trade.summary=T, silent=T, commission=commission, do.lag=-1)
function.name <- "New_6040.R"
src.file.name <- file.path(
getwd(),
"files",
"src",
paste("SRC_", function.name, sep="")
)
source(src.file.name)
rm(function.name, src.file.name)
load.packages('quantmod')
tickers = spl('SPY')
data2 <- new.env()
getSymbols(tickers, src = 'yahoo', from = "1970-01-01'", env = data2, auto.assign = T)
for(i in ls(data2)) data2[[i]] = adjustOHLC(data2[[i]], use.Adjusted=T)
bt.prep(data2, align='remove.na')
date <- first(index(data2$SPY))
tickers = '
STOCK = SPY + VTSMX + VFINX
BOND = TLT + VUSTX
CASH = SHY + TB3Y
'
load('./data/data.proxy.raw.Rdata')
# Load saved Proxies Raw Data, data.proxy.raw
data <- new.env()
getSymbols.extra(tickers, src = 'yahoo', from = date, env = data,
raw.data = data.proxy.raw, auto.assign = T, set.symbolnames = T)
# Probably started Dec.29, 1989 (last trading day)
for(i in data$symbolnames) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)
bt.prep(data, align='remove.na', dates='::')
# Prepare data
data$universe = data$prices > 0
# Sets to TRUE(or 1) all data prices that make sense
data$universe$CASH = NA
# Set weithing of cash to NA
prices = data$prices * data$universe
n = ncol(prices)
period.ends = endpoints(prices, 'months')
# Set period end to monthly endpoint
period.ends <- period.ends[-1]
if(period.ends[1]==1){ # If data started at end of month
period.ends<-period.ends[-1]
}
period.ends<-period.ends-1
# Signal generated one day before month end
obj = list()
# Create an empty list
commission = list(cps = 0.01, fixed = 10.0, percentage = 0.0)
# Commission
# Traditional, Dollar Weighted 40% Bonds & 60% Stock
target.allocation = NA * prices
target.allocation$STOCK = 60/100
target.allocation$BOND = 40/100
# Set target allocations
obj$weights$dollar.w.60.40 = target.allocation[period.ends, ]
# Risk Weighted 40% Bonds & 60% Stock
ret = diff(log(prices))
hist.vol = bt.apply.matrix(ret, runSD, n = 20)
# risk-parity
weight.risk = 1 / hist.vol
weight.risk = weight.risk / rowSums(weight.risk, na.rm=T)
# Weight based off risk
obj$weights$risk.w.60.40 = weight.risk[period.ends,]
# Cash Filter
# compute 10 month moving average
sma = bt.apply.matrix(prices, SMA, 200)
# go to cash if prices falls below 10 month moving average
go2cash = prices < sma
go2cash = ifna(go2cash, T)[period.ends,]
#Replaces all NAs with T and subsets for period ends
weight = obj$weights$risk.w.60.40
# set same weight
weight[go2cash] = 0
# Sets cash as 0 instead of NA
weight$CASH = 1 - rowSums(weight, na.rm=T)
# cash weight
obj$weights$risk.w.60.40.CASH = weight
weight[] = obj$weights$dollar.w.60.40
weight[go2cash] = 0
weight$CASH = 1 - rowSums(weight, na.rm=T)
obj$weights$dollar.w.60.40.CASH = weight
# Scale Risk Weighted 40% Bonds & 60% Stock strategy to have 6% volatility
models<-list()
models[names(obj$weights)]<-NA
for(i in 1:length(obj$weights)){
data$weight[period.ends+1, ]<-obj$weights[[i]]
models[[i]]<- bt.run.share(data, clean.signal=F,  trade.summary=T, silent=T, commission=commission)
}
# Run strategies
weight = target.vol.strategy(models$risk.w.60.40, ifna(weight.risk,0),
target=6/100, lookback.len=21, max.portfolio.leverage=100/100)
# Set weithing to 6% volatility
# invested not allocated to CASH
weight$CASH = 1 - rowSums(weight)
obj$weights$risk.w.60.40.target6.cash = weight[period.ends,]
data$weight[period.ends+1,]<-obj$weights$risk.w.60.40.target6.cash
models$risk.w.60.40.target6.cash<- bt.run.share(data, clean.signal=F, trade.summary=T, silent=T, commission=commission)
# Run strategy
models$dollar.w.60.40$period.weight<- obj$weights[[1]]
models$risk.w.60.40$period.weight<- obj$weights[[2]]
models$risk.w.60.40.CASH$period.weight<- obj$weights[[3]]
models$dollar.w.60.40.CASH$period.weight<- obj$weights[[4]]
models$risk.w.60.40.target6.cash$period.weight = weight[period.ends,]
# To make the signal report work
models$risk.w.60.40 <- NULL
models$dollar.w.60.40.CASH <-NULL
data2$weight[] = NA
data2$weight$SPY = 1
models$SPY = bt.run.share(data2, clean.signal=T, trade.summary=T, silent=T, commission=commission, do.lag=-1)
barplot.with.labels(sapply(models, compute.turnover, data), 'Average Annual Portfolio Turnover')
plotbt(models, plotX = T, log = 'y', LeftMargin = 3, main = NULL)
data
barplot.with.labels(sapply(models, compute.turnover, data), 'Average Annual Portfolio Turnover')
sapply(models, compute.turnover, data)
compute.turnover
compute.turnover(models$risk.w.60.40.target6.cash)
compute.turnover(models$risk.w.60.40.target6.cash, data)
compute.turnover
models$risk.w.60.40.target6.cash$trade.summary
portfolio.turnover
portfolio.turnover(data$weight)
portfolio.turnover(models)
portfolio.turnover
compute.turnover
compute.turnover(models)
compute.turnover(models$dollar.w.60.40)
compute.turnover(models$dollar.w.60.40, data)
compute.turnover(models$risk.w.60.40.CASH)
compute.turnover(models$risk.w.60.40.CASH, data)
compute.turnover(models$risk.w.60.40.CASH, data)
compute.turnover(models$risk.w.60.40.target6.cash, data)
models$risk.w.60.40.target6.cash$trade.summary
models$risk.w.60.40.target6.cash$trade.summary
compute.turnover(models$risk.w.60.40.CASH, data)
compute.turnover
setwd("~/Dropbox/Live Strategy Presentation/1. FAA-Strategy")
function.name <- "FAA_Strategy.R"
src.file.name <- file.path(
getwd(),
"files",
"src",
paste("SRC_", function.name, sep="")
)
source(src.file.name)
rm(function.name, src.file.name)
load.packages('quantmod')
tickers = '
US.STOCKS = VTI + VTSMX
FOREIGN.STOCKS = VEU + FDIVX
EMERGING>MARKETS=EEM + VEIEX
US.10YR.GOV.BOND = IEF + VFITX
REAL.ESTATE = VNQ + VGSIX
COMMODITIES = DBC + CRB
CASH = BND + VBMFX
'
load('./data/data.proxy.raw.Rdata')
# Load saved Proxies Raw Data, data.proxy.raw
data <- new.env()
getSymbols.extra(tickers, src = 'yahoo', from = '1990-01-21', env = data,
raw.data = data.proxy.raw, auto.assign = T,  set.symbolnames = T)
# Get data at appropriate date
for(i in data$symbolnames) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)
bt.prep(data, align='remove.na', dates='::')
data$universe = data$prices > 0
# Sets to TRUE(or 1) all data prices that make sense
data$universe$CASH = NA
# Set weighting of cash to NA
prices = data$prices * data$universe
# Filter out bad data that had negative prices
n = ncol(prices)
# Number of instruments
period.ends = endpoints(prices, 'months')
# Set period end to monthly endpoint
period.ends <- period.ends[-1]
if(period.ends[1]==1){ # If data started at end of month
period.ends<-period.ends[-1]
}
period.ends<-period.ends-1
# Signal generated one day before month end
models = list()
# Create an empty list
commission = list(cps = 0.01, fixed = 10.0, percentage = 0.0)
# Commission
ret = diff(log(prices))
# Get logged returns as a value
n.top = 3
# Number of assets in top category
mom.lookback = 80
vol.lookback = 80
cor.lookback = 80
# Variables for time lookback
weight=c(1, 0.5, 0.5)
# Weight for variables
hist.vol = sqrt(252) * bt.apply.matrix(ret, runSD, n = vol.lookback)
# Get the historical volatility in returns
mom = (prices / mlag(prices, mom.lookback) - 1)[period.ends,]
# Momentum calculation
avg.cor = data$weight * NA
# Set avg.cor too all NA
for(i in period.ends[period.ends > cor.lookback]){
hist = ret[(i - cor.lookback):i,]
include.index = !is.na(colSums(hist))
correlation = cor(hist[,include.index], use='complete.obs',method='pearson')
avg.correlation = rowSums(correlation, na.rm=T)
avg.cor[i,include.index] = avg.correlation
}
# Get correlations for each period
mom.rank = br.rank(mom)
cor.rank = br.rank(-(avg.cor[period.ends,]))
vol.rank = br.rank(-hist.vol[period.ends,])
# Ranking
avg.rank = weight[1]*mom.rank + weight[2]*vol.rank + weight[3]*cor.rank
meta.rank = br.rank(-avg.rank)
#absolute momentum filter
weight = (meta.rank <= n.top)/rowSums(meta.rank <= n.top, na.rm=T) * (mom > 0)
# cash logic
weight$CASH = 1 - rowSums(weight,na.rm=T)
data$weight[period.ends+1,] = weight[1:length(period.ends),]
# Set weight at period end based off signal from previous day
models$Strategy = bt.run.share(data, clean.signal=F,  trade.summary=T, silent=T, commission=commission)
# Run strategy
models$Strategy$period.weight = weight[1:length(period.ends),]
# To make the signal report work
models$Strategy
compute.turnover(models$Strategy, data)
